<types ns="_contextTesting">
  <import name="Transform" from="stream" link="https://nodejs.org/api/stream.html#stream_class_stream_transform" />
  <import name="Readable" from="stream" link="https://nodejs.org/api/stream.html#stream_class_stream_readable" />

  <embed src="node_modules/assert-throws/types/index.xml" />
  <embed src="node_modules/@zoroaster/fork/types/index.xml" />
  <embed src="node_modules/@zoroaster/fork/types/context.xml" />

  <type name="MaskContext" desc="The `this` context of mask methods which contains the mask's properties extracted from the result file.">
    <prop name="input">
      The input to the mask, normally as string, but parsed into an object if `jsonProps` contains the `'input'` value.
    </prop>
    <prop opt string name="preamble">
      The text at the top of the mask result file if present.
    </prop>
    <prop opt string name="inputs">
      The synchronous inputs for the fork, each on a new line in form of `question: answer`. This is not hard-coded, it's just a convention for naming the inputs to forks field.
    </prop>
  </type>

  <record name="MaskConfig" desc="Configuration for making test suites.">
    <prop opt name="context" type="function(new: _contextTesting.Context)|!Array<function(new: _contextTesting.Context)>|*">
      The single or multiple context constructors or objects to initialise for each test.
    </prop>
    <prop opt name="persistentContext" type="function(new: _contextTesting.Context)|!Array<function(new: _contextTesting.Context)>|*">
      The context constructor(s) that will be initialised and destroyed once per test suite, having a persistent state across tests.
    </prop>
    <fn opt name="getResults" return="*|!Promise">
      <arg name="this" type="_contextTesting.MaskContext">
        The context of the mask with inputs.
      </arg>
      <arg name="...args" type="_contextTesting.Context">
        Zoroaster contexts.
      </arg>
      A possibly async function which returns results of a test. If it outputs a string, it will be compared against the `expected` property of the mask using string comparison. If it outputs an object, its deep equality with `expected` can be tested by adding `'expected'` to the `jsonProps`. Otherwise, the result must be mapped for comparison with `expected` using the `mapActual` method.
    </fn>
    <fn opt name="getTransform" return="!(stream.Transform|Promise<!stream.Transform>)">
      <arg name="this" type="_contextTesting.MaskContext">
        The context of the mask with inputs.
      </arg>
      <arg name="...args" type="_contextTesting.Context">
        Zoroaster contexts.
      </arg>
      A possibly async function which returns a _Transform_ stream to be ended with the input specified in the mask's result. Its output will be accumulated and compared against the expected output of the mask.
    </fn>
    <fn opt name="getReadable"
      return="!(stream.Readable|Promise<!stream.Readable>)">
      <arg name="this" type="_contextTesting.MaskContext">
        The context of the mask with inputs.
      </arg>
      <arg name="...args" type="_contextTesting.Context">
        Zoroaster contexts.
      </arg>
      A possibly async function which returns a _Readable_ stream constructed with the input from the mask. Its output will be stored in memory and compared against the expected output of the mask.
    </fn>
    <prop opt name="fork" type="string|!_contextTesting.ForkConfig">
      The path to the module to fork with the mask's input split by whitespace as arguments, output of which will be compared against the `code`, `stdout` and `stderr` properties of the mask. Arguments with whitespace should be wrapped in speech marks, i.e. `'` or `"`. Additionally, `ForkConfig` with `module`, `getArgs`, `options` and `getOptions` properties can be passed for more control of how the fork will be started.
    </prop>
    <fn opt name="getThrowsConfig" return="_assertThrows.Config">
      <arg name="this" type="_contextTesting.MaskContext">
        The context of the mask with inputs.
      </arg>
      <arg name="...args" type="_contextTesting.Context">
        Zoroaster contexts.
      </arg>
      A function which should return a configuration for [`assert-throws`](https://github.com/artdecocode/assert-throws), including `fn` and `args`, when testing an error.
    </fn>
    <fn opt name="mapActual" return="string">
      <arg name="result">The result returned by `getResults`.</arg>
      The function to get a value to test against `expected` mask property from results returned by `getResults`.
    </fn>
    <fn opt name="assertResults" return="!Promise|undefined">
      <arg name="actual">Results returned by the test.</arg>
      <arg type="!Object<string, *>" name="expected">
        The expected results extracted from the mask file.
      </arg>
      A possibly async function containing any addition assertions on the results. The results from `getResults` and a map of expected values extracted from the mask's result (where `jsonProps` are parsed into JS objects) will be passed as arguments.
    </fn>
    <prop opt name="jsonProps" type="!Array<string>">
      The properties of the mask to parse as _JSON_ values.
    </prop>
    <prop opt name="jsProps" type="!Array<string>">
      The properties of the mask to parse into JavaScript objects. For example, a property can be written as `{ config: true }` and will be evaluated into an object.
    </prop>
    <prop opt name="splitRe" type="!RegExp">
      A regular expression used to detect the beginning of a new test in a mask result file. The default is `/^\/\/ /gm` for results from all files, and `/^## /gm` for results from `.md` files. Default `/^\/\/ /gm` or `/^## /gm`.
    </prop>
    <prop name="propStartRe" type="!RegExp" default="\/\‎⁎">
      The regex to detect the start of the property, e.g., in `/⁎ propName ⁎/` it is the default regex that detects `/⁎`. There's no option to define the end of the regex after the name. [If copying, replace `⁎` with `*`].
    </prop>
    <prop name="propEndRe" type="!RegExp" default="/\/\⁎\⁎\//">
      The regex which indicates the end of the property, e.g, in `/⁎ propName ⁎/ some prop value /⁎⁎/` it is the default that detects `/⁎⁎/`. [If copying, replace `⁎` with `*`].
    </prop>
  </record>
</types>