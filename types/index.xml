<types>
  <import name="Transform" from="stream"/>
  <import name="Readable" from="stream"/>
  <type name="MakeTestSuiteConf" desc="Configuration for making test suites.">
    <prop opt name="context" type="({new(): Context}|{new(): Context}[]|{})">
      Single or multiple context constructors or objects to initialise for each test.
    </prop>
    <prop opt name="getResults" type="(input: string, ...contexts?: Context[]) => string">
      A possibly async function which should return results of a test. If it returns a string, it will be compared against the `expected` property of the mask using string comparison. If it returns an object, its deep equality with `expected` can be tested by adding `'expected'` to the `jsonProps`.
    </prop>
    <prop opt name="getTransform" type="(...contexts?: Context[]) => Transform|Promise.<Transform>">
      A possibly async function which returns a _Transform_ stream to be ended with the input specified in the mask. Its output will be accumulated and compared against the expected output of the mask.
    </prop>
    <prop opt name="getReadable" type="(input: string, ...contexts?: Context[]) => Readable|Promise.<Readable>">
      A possibly async function which returns a _Readable_ stream constructed with the input from the mask. Its output will be stored in memory and compared against the expected output of the mask. This could be used to test a forked child process, for example.
    </prop>
    <prop opt name="fork" type="string|ForkConfig">
      A path to the module to fork with input as arguments, and compare its output against the `code`, `stdout` and `stderr` properties of the mask. Arguments with whitespace should be wrapped in speech marks, i.e. `'` or `"`. Additionally, `ForkConfig` with `module`, `getArgs`, `options` and `getOptions` properties can be passed for more control of how the fork will be started.
    </prop>
    <prop opt name="getThrowsConfig" type="(input: string, ...contexts?: Context[]) => { fn: function, args?: any[], message?: (string|RegExp) }">
      A function which should return a configuration for [`assert-throws`](https://github.com/artdecocode/assert-throws), including `fn` and `args`, when testing an error.
    </prop>
    <prop opt name="mapActual" type="(results: any) => string">
      An optional function to get a value to test against `expected` mask property from results. By default, the full result is used.
    </prop>
    <prop opt name="assertResults" type="(results: any, props: Object.<string, (string|object)>) => void">
      A function containing any addition assertions on the results. The results from `getResults` and a map of expected values extracted from the mask (where `jsonProps` are parsed into JS objects) will be passed as arguments.
    </prop>
    <prop opt name="jsonProps" type="string[]">
      Any additional properties to extract from the mask, and parse as _JSON_ values.
    </prop>
    <prop name="splitRe" type="RegExp" default="/^\/\/ /gm">
      A regular expression used to detect the beginning of a new test in a mask file.
    </prop>
  </type>
</types>